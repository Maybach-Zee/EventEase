// <auto-generated />
using System;
using EventEase.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventEase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250822175713_InitialCreateWithEventDates")]
    partial class InitialCreateWithEventDates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventEase.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EventId");

                    b.HasIndex("VenueId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("EventEase.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            ClientName = "John Smith",
                            Email = "john.smith@email.com",
                            PhoneNumber = "555-0123"
                        },
                        new
                        {
                            ClientId = 2,
                            ClientName = "Sarah Johnson",
                            Email = "sarah.j@email.com",
                            PhoneNumber = "555-0456"
                        },
                        new
                        {
                            ClientId = 3,
                            ClientName = "Mike Wilson",
                            Email = "mike.w@email.com",
                            PhoneNumber = "555-0789"
                        });
                });

            modelBuilder.Entity("EventEase.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Events", (string)null);

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            Description = "Annual technology conference",
                            EndDate = new DateTime(2025, 9, 22, 3, 57, 12, 897, DateTimeKind.Local).AddTicks(3759),
                            EventName = "Tech Conference",
                            StartDate = new DateTime(2025, 9, 21, 19, 57, 12, 895, DateTimeKind.Local).AddTicks(9761)
                        },
                        new
                        {
                            EventId = 2,
                            Description = "Wedding services showcase",
                            EndDate = new DateTime(2025, 10, 7, 1, 57, 12, 897, DateTimeKind.Local).AddTicks(4408),
                            EventName = "Wedding Expo",
                            StartDate = new DateTime(2025, 10, 6, 19, 57, 12, 897, DateTimeKind.Local).AddTicks(4405)
                        },
                        new
                        {
                            EventId = 3,
                            Description = "Year-end corporate celebration",
                            EndDate = new DateTime(2025, 10, 22, 0, 57, 12, 897, DateTimeKind.Local).AddTicks(4411),
                            EventName = "Corporate Gala",
                            StartDate = new DateTime(2025, 10, 21, 19, 57, 12, 897, DateTimeKind.Local).AddTicks(4410)
                        });
                });

            modelBuilder.Entity("EventEase.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues", (string)null);

                    b.HasData(
                        new
                        {
                            VenueId = 1,
                            Capacity = 500,
                            ImageUrl = "https://via.placeholder.com/600x400?text=Grand+Ballroom",
                            Location = "123 Main St",
                            VenueName = "Grand Ballroom"
                        },
                        new
                        {
                            VenueId = 2,
                            Capacity = 200,
                            ImageUrl = "https://via.placeholder.com/600x400?text=Conference+Center",
                            Location = "456 Oak Ave",
                            VenueName = "Conference Center"
                        },
                        new
                        {
                            VenueId = 3,
                            Capacity = 150,
                            ImageUrl = "https://via.placeholder.com/600x400?text=Garden+Pavilion",
                            Location = "789 Park Rd",
                            VenueName = "Garden Pavilion"
                        });
                });

            modelBuilder.Entity("EventEase.Models.Booking", b =>
                {
                    b.HasOne("EventEase.Models.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventEase.Models.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventEase.Models.Venue", "Venue")
                        .WithMany("Bookings")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Event");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("EventEase.Models.Client", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("EventEase.Models.Event", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("EventEase.Models.Venue", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
